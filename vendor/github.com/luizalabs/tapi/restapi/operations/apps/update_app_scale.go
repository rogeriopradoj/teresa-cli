package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UpdateAppScaleHandlerFunc turns a function with the right signature into a update app scale handler
type UpdateAppScaleHandlerFunc func(UpdateAppScaleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAppScaleHandlerFunc) Handle(params UpdateAppScaleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateAppScaleHandler interface for that can handle valid update app scale params
type UpdateAppScaleHandler interface {
	Handle(UpdateAppScaleParams, interface{}) middleware.Responder
}

// NewUpdateAppScale creates a new http.Handler for the update app scale operation
func NewUpdateAppScale(ctx *middleware.Context, handler UpdateAppScaleHandler) *UpdateAppScale {
	return &UpdateAppScale{Context: ctx, Handler: handler}
}

/*UpdateAppScale swagger:route PUT /apps/{app_name}/scale apps updateAppScale

Update app scale

Update app scale size (replicas)

*/
type UpdateAppScale struct {
	Context *middleware.Context
	Handler UpdateAppScaleHandler
}

func (o *UpdateAppScale) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUpdateAppScaleParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*UpdateAppScaleBody update app scale body

swagger:model UpdateAppScaleBody
*/
type UpdateAppScaleBody struct {

	/* number of PODs running the app

	Required: true
	Minimum: 1
	*/
	Scale *int64 `json:"scale"`
}

// Validate validates this update app scale body
func (o *UpdateAppScaleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateScale(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAppScaleBody) validateScale(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"scale", "body", o.Scale); err != nil {
		return err
	}

	if err := validate.MinimumInt("body"+"."+"scale", "body", int64(*o.Scale), 1, false); err != nil {
		return err
	}

	return nil
}
