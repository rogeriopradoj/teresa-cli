package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AddUserToTeamHandlerFunc turns a function with the right signature into a add user to team handler
type AddUserToTeamHandlerFunc func(AddUserToTeamParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn AddUserToTeamHandlerFunc) Handle(params AddUserToTeamParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// AddUserToTeamHandler interface for that can handle valid add user to team params
type AddUserToTeamHandler interface {
	Handle(AddUserToTeamParams, interface{}) middleware.Responder
}

// NewAddUserToTeam creates a new http.Handler for the add user to team operation
func NewAddUserToTeam(ctx *middleware.Context, handler AddUserToTeamHandler) *AddUserToTeam {
	return &AddUserToTeam{Context: ctx, Handler: handler}
}

/*AddUserToTeam swagger:route POST /teams/{team_name}/users teams addUserToTeam

Add user to team

*/
type AddUserToTeam struct {
	Context *middleware.Context
	Handler AddUserToTeamHandler
}

func (o *AddUserToTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAddUserToTeamParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*AddUserToTeamBody add user to team body

swagger:model AddUserToTeamBody
*/
type AddUserToTeamBody struct {

	/* email

	Required: true
	Min Length: 1
	*/
	Email *strfmt.Email `json:"email"`
}

// Validate validates this add user to team body
func (o *AddUserToTeamBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddUserToTeamBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("user"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.MinLength("user"+"."+"email", "body", string(*o.Email), 1); err != nil {
		return err
	}

	return nil
}
