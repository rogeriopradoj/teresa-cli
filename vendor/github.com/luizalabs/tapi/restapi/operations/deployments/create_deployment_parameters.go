package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateDeploymentParams creates a new CreateDeploymentParams object
// with the default values initialized.
func NewCreateDeploymentParams() CreateDeploymentParams {
	var ()
	return CreateDeploymentParams{}
}

// CreateDeploymentParams contains all the bound params for the create deployment operation
// typically these are obtained from a http.Request
//
// swagger:parameters createDeployment
type CreateDeploymentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  Required: true
	  In: formData
	*/
	AppTarball runtime.File
	/*App name
	  Required: true
	  Pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
	  In: path
	*/
	AppName string
	/*
	  In: formData
	*/
	Description *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CreateDeploymentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	appTarball, appTarballHeader, err := r.FormFile("appTarball")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "appTarball", err))
	} else {
		o.AppTarball = runtime.File{Data: appTarball, Header: appTarballHeader}
	}

	rAppName, rhkAppName, _ := route.Params.GetOK("app_name")
	if err := o.bindAppName(rAppName, rhkAppName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeploymentParams) bindAppName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.AppName = raw

	if err := o.validateAppName(formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeploymentParams) validateAppName(formats strfmt.Registry) error {

	if err := validate.Pattern("app_name", "path", string(o.AppName), `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeploymentParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}
