package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserLoginHandlerFunc turns a function with the right signature into a user login handler
type UserLoginHandlerFunc func(UserLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserLoginHandlerFunc) Handle(params UserLoginParams) middleware.Responder {
	return fn(params)
}

// UserLoginHandler interface for that can handle valid user login params
type UserLoginHandler interface {
	Handle(UserLoginParams) middleware.Responder
}

// NewUserLogin creates a new http.Handler for the user login operation
func NewUserLogin(ctx *middleware.Context, handler UserLoginHandler) *UserLogin {
	return &UserLogin{Context: ctx, Handler: handler}
}

/*UserLogin swagger:route POST /login auth userLogin

Log the user

User login

*/
type UserLogin struct {
	Context *middleware.Context
	Handler UserLoginHandler
}

func (o *UserLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUserLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
