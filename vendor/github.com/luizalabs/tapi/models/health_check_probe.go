package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*HealthCheckProbe health check probe

swagger:model HealthCheckProbe
*/
type HealthCheckProbe struct {

	/* minimum consecutive failures for the health check to be considered failed after having succeeded.

	Maximum: 10
	Minimum: 1
	*/
	FailureThreshold int64 `json:"failureThreshold,omitempty"`

	/* length of time before health checking is activated

	Maximum: 60
	Minimum: 1
	*/
	InitialDelaySeconds int64 `json:"initialDelaySeconds,omitempty"`

	/* path of the health check
	 */
	Path string `json:"path,omitempty"`

	/* how often to perform the health check

	Maximum: 300
	Minimum: 1
	*/
	PeriodSeconds int64 `json:"periodSeconds,omitempty"`

	/* minimum consecutive successes for the health check to be considered successful after having failed

	Maximum: 10
	Minimum: 1
	*/
	SuccessThreshold int64 `json:"successThreshold,omitempty"`

	/* length of time before health checking times out

	Maximum: 15
	Minimum: 1
	*/
	TimeoutSeconds int64 `json:"timeoutSeconds,omitempty"`
}

// Validate validates this health check probe
func (m *HealthCheckProbe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureThreshold(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInitialDelaySeconds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodSeconds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSuccessThreshold(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeoutSeconds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthCheckProbe) validateFailureThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureThreshold) { // not required
		return nil
	}

	if err := validate.MinimumInt("failureThreshold", "body", int64(m.FailureThreshold), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("failureThreshold", "body", int64(m.FailureThreshold), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckProbe) validateInitialDelaySeconds(formats strfmt.Registry) error {

	if swag.IsZero(m.InitialDelaySeconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("initialDelaySeconds", "body", int64(m.InitialDelaySeconds), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("initialDelaySeconds", "body", int64(m.InitialDelaySeconds), 60, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckProbe) validatePeriodSeconds(formats strfmt.Registry) error {

	if swag.IsZero(m.PeriodSeconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("periodSeconds", "body", int64(m.PeriodSeconds), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("periodSeconds", "body", int64(m.PeriodSeconds), 300, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckProbe) validateSuccessThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.SuccessThreshold) { // not required
		return nil
	}

	if err := validate.MinimumInt("successThreshold", "body", int64(m.SuccessThreshold), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("successThreshold", "body", int64(m.SuccessThreshold), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckProbe) validateTimeoutSeconds(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeoutSeconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeoutSeconds", "body", int64(m.TimeoutSeconds), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timeoutSeconds", "body", int64(m.TimeoutSeconds), 15, false); err != nil {
		return err
	}

	return nil
}
