package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*LimitRangeQuantity limit range quantity

swagger:model LimitRangeQuantity
*/
type LimitRangeQuantity struct {

	/* quantity of the resource.
	example:
	can be:
	  binarySI: Ki | Mi | Gi | Ti | Pi | Ei
	  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	  decimalSI: m | "" | k | M | G | T | P | E
	Note that 1024 = 1Ki but 1000 = 1k


	Required: true
	Pattern: ^\d+(([KMGTPE]{1}i)|([mkMGTPE]))?$
	*/
	Quantity *string `json:"quantity"`

	/* resouce type

	Required: true
	*/
	Resource *string `json:"resource"`
}

// Validate validates this limit range quantity
func (m *LimitRangeQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LimitRangeQuantity) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.Pattern("quantity", "body", string(*m.Quantity), `^\d+(([KMGTPE]{1}i)|([mkMGTPE]))?$`); err != nil {
		return err
	}

	return nil
}

var limitRangeQuantityTypeResourcePropEnum []interface{}

// prop value enum
func (m *LimitRangeQuantity) validateResourceEnum(path, location string, value string) error {
	if limitRangeQuantityTypeResourcePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["cpu","memory","storage"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			limitRangeQuantityTypeResourcePropEnum = append(limitRangeQuantityTypeResourcePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, limitRangeQuantityTypeResourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LimitRangeQuantity) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceEnum("resource", "body", *m.Resource); err != nil {
		return err
	}

	return nil
}
