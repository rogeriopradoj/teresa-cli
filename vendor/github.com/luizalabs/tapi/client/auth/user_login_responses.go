package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/luizalabs/tapi/models"
)

// UserLoginReader is a Reader for the UserLogin structure.
type UserLoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UserLoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUserLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUserLoginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUserLoginDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewUserLoginOK creates a UserLoginOK with default headers values
func NewUserLoginOK() *UserLoginOK {
	return &UserLoginOK{}
}

/*UserLoginOK handles this case with default header values.

Login token
*/
type UserLoginOK struct {
	Payload *models.LoginToken
}

func (o *UserLoginOK) Error() string {
	return fmt.Sprintf("[POST /login][%d] userLoginOK  %+v", 200, o.Payload)
}

func (o *UserLoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserLoginUnauthorized creates a UserLoginUnauthorized with default headers values
func NewUserLoginUnauthorized() *UserLoginUnauthorized {
	return &UserLoginUnauthorized{}
}

/*UserLoginUnauthorized handles this case with default header values.

Unauthorized
*/
type UserLoginUnauthorized struct {
	Payload *models.Forbidden
}

func (o *UserLoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /login][%d] userLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *UserLoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserLoginForbidden creates a UserLoginForbidden with default headers values
func NewUserLoginForbidden() *UserLoginForbidden {
	return &UserLoginForbidden{}
}

/*UserLoginForbidden handles this case with default header values.

Forbidden
*/
type UserLoginForbidden struct {
	Payload *models.Forbidden
}

func (o *UserLoginForbidden) Error() string {
	return fmt.Sprintf("[POST /login][%d] userLoginForbidden  %+v", 403, o.Payload)
}

func (o *UserLoginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserLoginDefault creates a UserLoginDefault with default headers values
func NewUserLoginDefault(code int) *UserLoginDefault {
	return &UserLoginDefault{
		_statusCode: code,
	}
}

/*UserLoginDefault handles this case with default header values.

Error
*/
type UserLoginDefault struct {
	_statusCode int

	Payload *models.GenericError
}

// Code gets the status code for the user login default response
func (o *UserLoginDefault) Code() int {
	return o._statusCode
}

func (o *UserLoginDefault) Error() string {
	return fmt.Sprintf("[POST /login][%d] userLogin default  %+v", o._statusCode, o.Payload)
}

func (o *UserLoginDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
